AWSTemplateFormatVersion: '2010-09-09'
Description: Stack to deploy the Azure Devops deployer for Cam using CAM Azure Stack Deployment Template https://github.com/Prosperoware/cam-azure-deployment
Parameters:
  ApiGwStage:
    Type: String
Resources:
  # FunctionExecutionRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     RoleName: TCLambdaExrole
  #     Description: Function Execution role for TokenChamps Cloud Formation
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #             - lambda.amazonaws.com
  #           Action:
  #             - 'sts:AssumeRole'
  #     ManagedPolicyArns: 
  #           - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
  #           - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
  #           - 'arn:aws:iam::aws:policy/AmazonDynamoDBReadOnlyAccess'
  ApiGWAzureDeployer:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Description: Azure Deployer Rest Api 
      Name: AzureDeployerApi
      ProtocolType: HTTP
      CorsConfiguration:
        AllowCredentials: false
        AllowHeaders: 
          - content-type
          - authorization
          - x-amz-date
          - x-api-key
          - x-amz-security-token
        AllowMethods: 
          - "*"
        AllowOrigins: 
          - "*"
  ApiGWAzureDeployerStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties: 
      StageName: !Ref ApiGwStage
      Description: Stage for the api gw
      AutoDeploy: true
      ApiId: !Ref ApiGWAzureDeployer
      AccessLogSettings:
        DestinationArn: !GetAtt ApiGWLogGroup.Arn
        Format: $context.identity.sourceIp - - [$context.requestTime] "$context.httpMethod $context.routeKey $context.protocol" $context.status $context.responseLength $context.requestId $context.integrationErrorMessage
  ApiGWLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join
        - '-'
        - - !Ref ApiGWAzureDeployer
          - access-logs
# LAMBDA AUTHORIZER
  ApiGWTestJWTAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties: 
      ApiId: !Ref ApiGWAzureDeployer
      AuthorizerType: REQUEST
      AuthorizerResultTtlInSeconds: 0
      AuthorizerUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CFLambdaAzureAuthorizer.Arn}/invocations"
      AuthorizerPayloadFormatVersion: 2.0
      IdentitySource:
        - '$request.header.Authorization'
      Name: tokenyAuth
  CFLambdaAzureAuthorizer:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs12.x
      Role: "arn:aws:iam::236297122403:role/TCLambdaExrole"
      Handler: index.handler
      Code:
        ZipFile: |
          
          var AWS = require("aws-sdk");
          if (process.env.RUNNINGLOCALLY === 'true') {
            var credentials = new AWS.SharedIniFileCredentials({ profile: 'xher' });
            AWS.config.credentials = credentials;
          }


          exports.handler = async (event) => {

            console.log(JSON.stringify(event));
            var token='';
            var tenantid='';
            
            if(event.routeKey.includes('customer')){
              console.log('Post Customer');
              tenantid = event.headers.tenantid;
              token = event.headers.authorization;
            }
            else{
              try {
                console.log('Report');
                let data = event.headers.authorization.split(' ');
                let buff = Buffer.from(data[1], 'base64');
                //let text =Buffer.from(data[1]).toString('ascii')
                let text = buff.toString('ascii');
                console.log(text);
                tenantid = text.split(':')[0];
                token = text.split(':')[1];
              } catch (error) {
                
              }
            }
            console.log(token);

            let res;

            var validation = await getConfirmation(tenantid,token);


            if (validation) {

              res = generatePolicy('user', 'Allow', 'POST')
            }
            else {
              res = generatePolicy('user', 'Deny', 'POST')
            }
            console.log(JSON.stringify(res));
            return res;

          };
          // Help function to generate an IAM policy
          var generatePolicy = function (principalId, effect, resource) {
            var authResponse = {};

            authResponse.principalId = principalId;
            if (effect && resource) {
              var policyDocument = {};
              policyDocument.Version = '2012-10-17';
              policyDocument.Statement = [];
              var statementOne = {};
              statementOne.Action = '*';
              statementOne.Effect = effect;
              statementOne.Resource = '*';
              policyDocument.Statement[0] = statementOne;
              authResponse.policyDocument = policyDocument;
            }

            // Optional output with custom properties of the String, Number or Boolean type.
            authResponse.context = {
              "stringKey": "stringval",
              "numberKey": 123,
              "booleanKey": true
            };
            return authResponse;
          }

          async function getConfirmation(prosperoTenantid,secret) {

            try {
              var documentClient = new AWS.DynamoDB.DocumentClient({'region': process.env.AWSREGION});
              var params = {
                TableName: process.env.DYNAMOTABLE,
                KeyConditionExpression: 'tenant_id = :hkey',
                ExpressionAttributeValues: {
                  ':hkey': prosperoTenantid,
                }
              };

              let espera = await documentClient.query(params).promise();
              
              if(espera.Count===1){

                if(espera.Items[0].etlConfig.clientSecret === secret)
                  return true;
                else 
                  return false;
              }
              else{
                return false;
              }
              
            } catch (error) {
              console.log('Errror')
              return false;
            }

          }
      Environment:
        Variables:
          AWSREGION: us-east-1
          DYNAMOTABLE: prosperoware.io_Tenant_Subscribers
      Description: Authorizer for the Azure deployer.
      FunctionName: 'CFLambdaAzureAuthorizer'
  CFLambdaAzureAuthorizerLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName:
        Ref: CFLambdaAzureAuthorizer
      SourceArn:
        'Fn::Sub':
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/authorizers/${__AuthorizerId__}
          - __Stage__: '*'
            __ApiId__:
              Ref: ApiGWAzureDeployer
            __AuthorizerId__:
              Ref: ApiGWTestJWTAuthorizer
              
#CFUpdateRepos
  HTTPAPIRouteCFUpdateRepos:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGWAzureDeployer
      RouteKey: 'POST /updaterepos'
      Target: !Join
        - /
        - - integrations
          - !Ref LambdaIntegrationCFUpdateRepos
  LambdaIntegrationCFUpdateRepos:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGWAzureDeployer
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt LambdaCFUpdateRepos.Arn 
      PayloadFormatVersion: '2.0'
  LambdaCFUpdateRepos:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs12.x
      Role: "arn:aws:iam::236297122403:role/TCLambdaExrole"
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = async (event) => {
              const response = {
                  statusCode: 200,
                  body: JSON.stringify('Hello from the ' + event.routeKey + ' route!'),
              };
              return response;
          };
      Description: send the petition to update all repos subscribed to the auto update feature
      Environment:
        Variables:
          AWSREGION: !Ref "AWS::Region"
          DYNAMOTABLE: !Ref DynamoCFAzureDeployerInfo
          TABLE_LOGS: !Ref DynamoCFAzureDeployerLog
      FunctionName: 'CFUpdateReposPost'
  APIInvokeLambdaPermissionCFUpdateRepos:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaCFUpdateRepos
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGWAzureDeployer}/${ApiGWAzureDeployerStage}/POST/updaterepos
#CFCustomerGet
  HTTPAPIRouteCFCustomerGet:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGWAzureDeployer
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref ApiGWTestJWTAuthorizer
      RouteKey: 'GET /customer'
      Target: !Join
        - /
        - - integrations
          - !Ref LambdaIntegrationCFCustomerGet
  LambdaIntegrationCFCustomerGet:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGWAzureDeployer
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt LambdaCFCustomerGet.Arn 
      PayloadFormatVersion: '2.0'
  LambdaCFCustomerGet:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs12.x
      Role: "arn:aws:iam::236297122403:role/TCLambdaExrole"
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = async (event) => {
              const response = {
                  statusCode: 200,
                  body: JSON.stringify('Hello from the ' + event.routeKey + ' route!'),
              };
              return response;
          };
      Description: Get the info of the customer to validate that can be subscribed to the auto update feature
      Environment:
        Variables:
          AWSREGION: !Ref "AWS::Region"
          DYNAMOTABLE: prosperowaredev.io_Tenant_Subscribers
          AZUREDEPLOYERDYNAMOTABLE : !Ref DynamoCFAzureDeployerInfo
      FunctionName: 'CFvalidatecustomerGet'
  APIInvokeLambdaPermissionCFCustomerGet:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaCFCustomerGet
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGWAzureDeployer}/${ApiGWAzureDeployerStage}/GET/customer
#CFCustomerPOST
  HTTPAPIRouteCFCustomerPOST:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGWAzureDeployer
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref ApiGWTestJWTAuthorizer
      RouteKey: 'POST /customer'
      Target: !Join
        - /
        - - integrations
          - !Ref LambdaIntegrationCFCustomerPOST
  LambdaIntegrationCFCustomerPOST:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGWAzureDeployer
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt LambdaCFCustomerPOST.Arn 
      PayloadFormatVersion: '2.0'
  LambdaCFCustomerPOST:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs12.x
      Role: "arn:aws:iam::236297122403:role/TCLambdaExrole"
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = async (event) => {
              const response = {
                  statusCode: 200,
                  body: JSON.stringify('Hello from the ' + event.routeKey + ' route!'),
              };
              return response;
          };
      Description: Subscribe a customer to the auto update feature
      Environment:
        Variables:
          AWSREGION: !Ref "AWS::Region"
          DYNAMOTABLE: !Ref DynamoCFAzureDeployerInfo
      FunctionName: 'CFCustomerPOST'
  APIInvokeLambdaPermissionCFCustomerPOST:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaCFCustomerPOST
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGWAzureDeployer}/${ApiGWAzureDeployerStage}/POST/customer
#CFreportPost
  HTTPAPIRouteCFreportPost:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGWAzureDeployer
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref ApiGWTestJWTAuthorizer
      RouteKey: 'POST /report'
      Target: !Join
        - /
        - - integrations
          - !Ref LambdaIntegrationCFreportPost
  LambdaIntegrationCFreportPost:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGWAzureDeployer
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt LambdaCFreportPost.Arn 
      PayloadFormatVersion: '2.0'
  LambdaCFreportPost:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs12.x
      Role: "arn:aws:iam::236297122403:role/TCLambdaExrole"
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = async (event) => {
              const response = {
                  statusCode: 200,
                  body: JSON.stringify('Hello from the ' + event.routeKey + ' route!'),
              };
              return response;
          };
      Description: Receive the updates from the deployment  from Azure devops pipeline 
      Environment:
        Variables:
          AWSREGION: !Ref "AWS::Region"
          TABLE_LOGS: !Ref DynamoCFAzureDeployerLog
      FunctionName: 'CFreportPost'
  APIInvokeLambdaPermissionCFreportPost:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaCFreportPost
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGWAzureDeployer}/${ApiGWAzureDeployerStage}/POST/report
#CFDashboardGet
  HTTPAPIRouteCFdashboardGet:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGWAzureDeployer
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref ApiGWTestJWTAuthorizer
      RouteKey: 'GET /dashboard'
      Target: !Join
        - /
        - - integrations
          - !Ref LambdaIntegrationCFdashboardGet
  LambdaIntegrationCFdashboardGet:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGWAzureDeployer
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt LambdaCFdashboardGet.Arn 
      PayloadFormatVersion: '2.0'
  LambdaCFdashboardGet:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs12.x
      Role: "arn:aws:iam::236297122403:role/TCLambdaExrole"
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = async (event) => {
              const response = {
                  statusCode: 200,
                  body: JSON.stringify('Hello from the ' + event.routeKey + ' route!'),
              };
              return response;
          };
      Description: Get the info of the dashboard
      Environment:
        Variables:
          AWSREGION: !Ref "AWS::Region"
          AZUREDEPLOYERDYNAMOTABLE : !Ref DynamoCFAzureDeployerLog
      FunctionName: 'CFDashboardGet'
  APIInvokeLambdaPermissionCFdashboardGet:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaCFdashboardGet
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGWAzureDeployer}/${ApiGWAzureDeployerStage}/GET/dashboard
#DYNAMODB TABLE 
  DynamoCFAzureDeployerInfo:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PROVISIONED
        AttributeDefinitions: 
          - 
            AttributeName: "prosperoTenantid"
            AttributeType: "S"
        KeySchema: 
          - 
            AttributeName: "prosperoTenantid"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "CFAzureDeployerInfo"
  DynamoCFAzureDeployerLog:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PROVISIONED
      AttributeDefinitions: 
        - 
          AttributeName: "Logid"
          AttributeType: "S"
        - 
          AttributeName: "tenantid"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "Logid"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      GlobalSecondaryIndexes: 
        - 
          IndexName: "tenantid-index"
          KeySchema: 
            - 
              AttributeName: "tenantid"
              KeyType: "HASH"
          Projection: 
            ProjectionType: "ALL"
          ProvisionedThroughput: 
            ReadCapacityUnits: "1"
            WriteCapacityUnits: "1"
      TableName: "CFAzureDeployerLog"