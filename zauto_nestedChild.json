{
	"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
        "Deploymenttype": {
			"type": "string",
			"defaultValue": "Standard",
			"allowedValues": ["Standard", "Premium"]
		},
		"ServiceBusResourceId": {
			"type": "string",
			"minLength": 36,
			"metadata": {
				"description": "Prosperoware Tenant Id will be provided by Prosperoware. Make sure to get the key before starting the installation."
			}
		},
		"ProsperowareTenantId": {
			"type": "string",
			"minLength": 36,
			"metadata": {
				"description": "Prosperoware Tenant Id will be provided by Prosperoware. Make sure to get the key before starting the installation."
			}
		},
		"ProsperowareEncryptedKey": {
			"type": "securestring",
			"minLength": 32,
			"metadata": {
				"description": "This encrypted Key will be provided by Prosperoware. Make sure to get the key before starting the installation."
			}
		},
		"ProsperowareSecretKey": {
			"type": "securestring",
			"minLength": 32,
			"metadata": {
				"description": "This secret Key will be provided by Prosperoware. Make sure to get the key before starting the installation."
			}
		},
		"Features": {
			"type": "string",
			"allowedValues": ["ETL", "Content Sync", "Both"]
		},
		"EnvironmentStage": {
			"type": "string",
			"allowedValues": ["dev", "qa", "stg", "prod"]
		},
		"InstanceUniqueName": {
			"type": "string",
			"minLength": 3,
			"maxLength": 11
		},
		"TopLevelDomain": {
			"type": "string",
			"allowedValues": ["io", "eu", "com", "co.uk"]
		},
		"administratorLogin": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "MySQL Database administrator login name"
			}
		},
		"administratorLoginPassword": {
			"type": "securestring",
			"minLength": 8,
			"maxLength": 128,
			"metadata": {
				"description": "MySQL Database administrator password"
			}
		},
		"branch": {
			"type": "string",
			"metadata": {
				"description": "branch"
			}
		},
		"repo": {
			"type": "string",
			"metadata": {
				"description": "repo"
			}
		},
		"serverfarmresourceid": {
			"type": "string",
			"metadata": {
				"description": "Server farm resource id"
			}
		},
		"vnetName": {
			"type": "string",
			"defaultValue": "VNet1",
			"metadata": {
				"description": "VNet name"
			}
		},
		"subnet1Name": {
			"type": "string",
			"defaultValue": "Subnet1",
			"metadata": {
				"description": "Subnet 1 Name"
			}
		}
	},
	"variables": {
		"commonId": "[concat(parameters('InstanceUniqueName'), parameters('EnvironmentStage'), replace(parameters('TopLevelDomain'), '.', ''))]",
		"resourcesNamespace": "[concat(parameters('InstanceUniqueName'), parameters('EnvironmentStage'), '-', replace(parameters('TopLevelDomain'), '.', ''))]",
		"storageAccountName": "[concat('strg',variables('commonId'))]",
		"applicationConfigBucket": "[concat(variables('resourcesNamespace'), '-application-config')]",
		"mySqlServerName": "[concat('mysql-', variables('resourcesNamespace'))]",
		"cosmosName": "[concat('cosmos-', variables('resourcesNamespace'))]",
		"serviceBusName": "[concat('servicebus-', variables('resourcesNamespace'))]",
		"cosmosTenantdb": "[concat(variables('resourcesNamespace'),'-contentsync-tenant')]",
		"etlQueueName": "[concat(variables('resourcesNamespace'), '-etl-process-v1')]",
		"csQueueName": "[concat(variables('resourcesNamespace'), '-job-process-v1')]",
		"etlRenewalTopicName": "[concat(variables('resourcesNamespace'), '-etl_renewal_worker_start')]",
		"etlMappingTopicName": "[concat(variables('resourcesNamespace'), '-etl_mapping_worker_start')]",
		"etlActionTopicName": "[concat(variables('resourcesNamespace'), '-etl_document_action')]",
		"etlApiAppName": "[concat(variables('resourcesNamespace'), '-etl-api')]",
		"etlRenewalAppName": "[concat(variables('resourcesNamespace'), '-etl-renewal')]",
		"etlMappingAppName": "[concat(variables('resourcesNamespace'), '-etl-mapping')]",
		"etlProcessAppName": "[concat(variables('resourcesNamespace'), '-etl-process')]",
		"etlActionAppName": "[concat(variables('resourcesNamespace'), '-etl-action')]",
		"configAppName": "[concat(variables('resourcesNamespace'), '-etl-config')]",
		"csApiAppName": "[concat(variables('resourcesNamespace'), '-contentsync-api')]",
		"csProcessAppName": "[concat(variables('resourcesNamespace'), '-contentsync-process')]",
		"csRetryAppName": "[concat(variables('resourcesNamespace'), '-contentsync-retry')]",
		"Location": "[resourceGroup().location]",
		"apiVersion": "/api/v1",
		"authorizationRulesName": "RootManageSharedAccessKey",
		"etlApiAppInsightsName": "[concat(variables('resourcesNamespace'), '-etl-api')]",
		"etlRenewalAppInsightsName": "[concat(variables('resourcesNamespace'), '-etl-renewal')]",
		"etlMappingAppInsightsName": "[concat(variables('resourcesNamespace'), '-etl-mapping')]",
		"etlProcessAppInsightsName": "[concat(variables('resourcesNamespace'), '-etl-process')]",
		"etlActionAppInsightsName": "[concat(variables('resourcesNamespace'), '-etl-action')]",
		"configAppInsightsName": "[concat(variables('resourcesNamespace'), '-etl-config')]",
		"csApiAppInsightsName": "[concat(variables('resourcesNamespace'), '-contentsync-api')]",
		"csProcessAppInsightsName": "[concat(variables('resourcesNamespace'), '-contentsync-process')]",
		"csRetryAppInsightsName": "[concat(variables('resourcesNamespace'), '-contentsync-retry')]",
		"isETL": "[or(equals(parameters('Features'), 'ETL'), equals(parameters('Features'), 'Both'))]",
		"isCS": "[or(equals(parameters('Features'), 'Content Sync'), equals(parameters('Features'), 'Both'))]"
	},
	"resources": [
		//configAppInsightsName
		{
			"type": "Microsoft.Web/sites",
			"apiVersion": "2018-11-01",
			"name": "[variables('configAppName')]",
			"location": "[variables('Location')]",
			"kind": "functionapp",
			"identity": {
				"type": "SystemAssigned"
			},
			"properties": {
				"enabled": true,
				"hostNameSslStates": [
					{
						"name": "[concat(variables('configAppName'), '.azurewebsites.net')]",
						"sslState": "Disabled",
						"hostType": "Standard"
					},
					{
						"name": "[concat(variables('configAppName'), '.scm.azurewebsites.net')]",
						"sslState": "Disabled",
						"hostType": "Repository"
					}
				],
				"serverFarmId": "[parameters('serverfarmresourceid')]",
				"reserved": false,
				"isXenon": false,
				"hyperV": false,
				"siteConfig": {
					"appSettings": [
						{
							"name": "FUNCTIONS_EXTENSION_VERSION",
							"value": "~3"
						},
						{
							"name": "FUNCTIONS_WORKER_RUNTIME",
							"value": "node"
						},
						{
							"name": "WEBSITE_NODE_DEFAULT_VERSION",
							"value": "~14"
						},
						{
							"name": "AzureWebJobsStorage",
							"value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')),'2019-06-01').keys[0].value)]"
						},
						{
							"name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
							"value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')),'2019-06-01').keys[0].value, ';EndpointSuffix=core.windows.net')]"
						},
						{
							"name": "WEBSITE_CONTENTSHARE",
							"value": "[concat(toLower(variables('configAppName')), '9ded')]"
						},
						{
							"name": "lambda_profile",
							"value": "[parameters('EnvironmentStage')]"
						},
						{
							"name": "storage_accountname",
							"value": "[variables('storageAccountName')]"
						},
						{
							"name": "mySqlServerName",
							"value": "[variables('mySqlServerName')]"
						},
						{
							"name": "mySqlUsername",
							"value": "[parameters('administratorLogin')]"
						},
						{
							"name": "mySqlPwd",
							"value": "[parameters('administratorLoginPassword')]"
						},
						{
							"name": "mySqlDatabaseName",
							"value": "[variables('commonId')]"
						},
						{
							"name": "etl_job_process_queue",
							"value": "[variables('etlQueueName')]"
						},
						{
							"name": "contentsync_job_process_queue",
							"value": "[variables('csQueueName')]"
						},
						{
							"name": "cosmos_accountname",
							"value": "[variables('cosmosName')]"
						},
						{
							"name": "cosmos_accesskey",
							"value": "[listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosName')),'2020-09-01').primaryMasterKey]"
						},
						{
							"name": "cosmos_csdbname",
							"value": "[variables('commonId')]"
						},
						{
							"name": "servicebus_namespace",
							"value": "[variables('serviceBusName')]"
						},
						{
							"name": "storage_accountkey",
							"value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')),'2019-06-01').keys[0].value]"
						},
						{
							"name": "applicationConfigBucket",
							"value": "[variables('applicationConfigBucket')]"
						},
						{
							"name": "cosmos_tenant_container",
							"value": "[variables('cosmosTenantdb')]"
						},
						{
							"name": "etl_api_url",
							"value": "[concat(variables('etlApiAppName'), '.azurewebsites.net')]"
						},
						{
							"name": "Prosperoware_tenantId",
							"value": "[parameters('ProsperowareTenantId')]"
						},
						{
							"name": "Prosperoware_encryptedKey",
							"value": "[parameters('ProsperowareEncryptedKey')]"
						},
						{
							"name": "Prosperoware_secretKey",
							"value": "[parameters('ProsperowareSecretKey')]"
						},
						{
							"name": "product_features",
							"value": "[parameters('Features')]"
						},
						{
							"name": "WEBSITE_RUN_FROM_PACKAGE",
							"value": "1"
						}
					],
					"vnetRouteAllEnabled": "[if(equals(parameters('Deploymenttype'),'Standard'),'false','true')]",
					"ftpsState": "[if(equals(parameters('Deploymenttype'),'Standard'),'FtpsOnly','Disabled')]"
				},
				"scmSiteAlsoStopped": false,
				"clientAffinityEnabled": false,
				"clientCertEnabled": false,
				"clientCertMode": "Optional",
				"hostNamesDisabled": false,
				"containerSize": 1536,
				"dailyMemoryTimeQuota": 0,
				"httpsOnly": true,
				"redundancyMode": "None",
				"virtualNetworkSubnetId": "[if(equals(parameters('Deploymenttype'),'Standard'),null(),resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnet1Name')))]",
				"keyVaultReferenceIdentity": "[if(equals(parameters('Deploymenttype'),'Standard'),null(),'SystemAssigned')]"
			}
		}
	],
	"outputs": {}
}
